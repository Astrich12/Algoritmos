AUTORES:
	Nombres->
		Julián Blanco Sóñora

	Login->
		julian.blanco.sonora@udc.es


MÁQUINA EN LA QUE SE EJECUTÓ: 

  	->Modelo						
            Asus TUF Gaming FX505GD
  	->Procesador
            Intel Core i7-8700H.
  	->Adaptador gráfico
            NVIDIA GeForce GTX 1050 (Laptop) - 4096 MB, Núcleo: 1354 MHz, 
            	Memoría: 1752 MHz, GDDR5, 376.19, Optimus
  	->Memoría RAM
            15850MiB MB DDR4 SDRAM Dual-Channel
  	->Disco duro
            HDD 1TB
  	->Sistema operativo 
            Ubuntu 22.04.1 LTS
  	->Kernel
            5.15.0-48-generic 
  	->Architecture: 
            x86-64


INTRODUCCIÓN:
	En esta práctica estudiaremos tres algoritmos, implementados en lenguaje C,
		para calcular la sucesión de Fibonacci, comprobando su correcto funcionamiento.


Unidad de medición: microsegundos (ms)


EJECUCION ALGORITMOS


EJECUCION FIB1

	       n			 t(n)		     t(n)/1.1^n		t(n)/((1+sqrt(5)/2)^n)	       t(n)/2^n
(*)	       2		     0.00695000		     0.00574380		     0.00265466		     0.00173750	@
(*)	       4		     0.02164000		     0.01478041		     0.00315723		     0.00135250
(*)	       8		     0.14303000		     0.06672455		     0.00304457		     0.00055871
(*)	      16		     6.66678000		     1.45088557		     0.00302074		     0.00010173
	      32		 15299.00000000		   724.59798095		     0.00314093		     0.00000356

										cte: 0.0030 

	   	Cota subestimada 	->	1.1^n
	   	Cota ajustada	 	->	(1+sqrt(5)/2)^n	
	   	Cota Sobreestimada	->	2^n

	(*) 	-> Tiempo promedio en 100000 ejecuciones del algoritmo
 	@	-> Anomalia


EJECUCION FIB2

	      n				t(n)		    t(n)/n^0.8			t(n)/n		 t(n)/n*log(n)
(*)	     1000		    2.65400000		    0.01056576		    0.00265400		    0.00038421
(*)	    10000		   26.67800000		    0.01683268		    0.00266780		    0.00028965
(*)	   100000		  266.58500000		    0.02665850		    0.00266585		    0.00023155
	  1000000		 2670.00000000		    0.04231665		    0.00267000		    0.00019326
	 10000000		26479.00000000		    0.06651224		    0.00264790		    0.00016428
										cte: 0.0026 

	   	Cota subestimada 	->	n^0.8
	   	Cota ajustada	 	->	n	
	   	Cota Sobreestimada	->	n*log(n)

	(*) 	-> Tiempo promedio en 1000 ejecuciones del algoritmo
 	@	-> Anomalia


EJECUCION FIB3

	       n			 t(n)		  t(n)/sqrt(log(n))	    t(n)/log(n)		     t(n)/n^0.5
(*)	      1000		     0.03939000		     0.01498710		     0.00570229		     0.00124562	@
(*)	     10000		     0.04743000		     0.01562843		     0.00514965		     0.00047430
(*)	    100000		     0.05977000		     0.01761531		     0.00519156		     0.00018901
(*)	   1000000		     0.06946000		     0.01868750		     0.00502768		     0.00006946
(*)	  10000000		     0.08336000		     0.02076351		     0.00517183		     0.00002636

										cte: 0.0051 

	   	Cota subestimada 	->	sqrt(log(n))
	   	Cota ajustada	 	->	log(n)	
	   	Cota Sobreestimada	->	n^0.5

	(*) 	-> Tiempo promedio en 100000 ejecuciones del algoritmo
 	@	-> Anomalia

CONCLUSIONES:
	Tras la ejecución de los tres algoritmos, podemos observar que fib3 se ejecuta de forma mas rápida respecto 
		a todos los anteriores, obteniendo una complejidad de log(n).
	De todos las variantes del algoritmo, tambien se puede ver que fib1 se muestra mas lento, obteniendo una 
		complejidad de medición (1+sqrt(5)/2)^n , que comparada con fib3 resulta mucho mas alta.
	Debemos resaltar también, que en todos los casos la complejidad teórica, coincide con la obtenida empíricamente.
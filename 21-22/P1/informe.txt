AUTORES:

	->nombres: 	Julian Blanco Sóñora

	->logins: 	julian.blanco.sonora@udc.es


MÁQUINA EN LA QUE SE EJECUTÓ: 

  	->Modelo						
  	  		Asus TUF Gaming FX505GD
  	->Procesador
	  		Intel Core i7-8700H.
  	->Adaptador gráfico
	  		NVIDIA GeForce GTX 1050 (Laptop) - 4096 MB, Núcleo: 1354 MHz, Memoría: 1752 MHz, GDDR5, 376.19, Optimus
  	->Memoría RAM
	  		8192 MB DDR4 SDRAM Dual-Channel
  	->Disco duro
	  		Disco Duro externo 500 GB
  	->Sistema operativo 
    	    Ubuntu 20.04.1 LTS
  	->Kernel
    	    Linux 5.8.0-52-generic
  	->Architecture: 
    	    x86-64

INTRODUCCIÓN:
	En esta práctica estudiaremos dos algoritmos implementados en el lenguaje C para encontrar la suma de la subsecuencia máxima, determinando sus tiempos de ejecución con vectores aleatorios de distintos tamaños. Además realizaremos una comprobación empírica de complejidad teórica y otras dos utilizando una cota subestimada y sobrestimada para cada algoritmo.

Unidad de medición: microsegundos (ms)


TABLA TIEMPOS:

sumaSubMax1

	      n				  t(n)		     t(n)/n^1.8		     t(n)/n^2.0		     t(n)/n^2.2
(*)	     500		     249.78000		 0.003462674378		 0.000999120000		 0.000288286066		@
	    1000		    1002.00000		 0.003989033849		 0.001002000000		 0.000251691020		@
	    2000		    4030.00000		 0.004607348398		 0.001007500000		 0.000220312458		@
	    4000		   15595.00000		 0.005120087639		 0.000974687500		 0.000185546770
	    8000		   61794.00000		 0.005826185821		 0.000965531250		 0.000160010447
	   16000		  246604.00000		 0.006677042613		 0.000963296875		 0.000138974831
	   32000		  986695.00000		 0.007672077239		 0.000963569336		 0.000121018837
	   													cte: 0.00096 

	   	Cota subestimada 	->	1.8
	   	Cota ajustada	 	->	2	
	   	Cota Sobreestimada	->	2.2

	(*) -> Tiempo promedio en 100 ejecuciones del algoritmo
 	@	-> Anomalia


sumaSubMax2

	      n				  t(n)		     t(n)/n^0.8		     t(n)/n		     	 t(n)/n^1.2
(*)	     500		       1.93000		 0.013377695473		 0.003860000000		 0.001113764327		@
(*)	    1000		       3.27000		 0.013018104477		 0.003270000000		 0.000821386863		@
(*)	    2000		       5.60000		 0.012804541454		 0.002800000000		 0.000612282761		@
(*)	    4000		       7.58000		 0.009954540379		 0.001895000000		 0.000360742421		@
(*)	    8000		      17.05000		 0.012860338317		 0.002131250000		 0.000353196506
(*)	   16000		      35.01000		 0.015166875599		 0.002188125000		 0.000315680773
(*)	   32000		      71.64000		 0.017825248562		 0.002238750000		 0.000281174287
														cte: 0.0022

	   	Cota subestimada 	->	0.8
	   	Cota ajustada	 	->	1
	   	Cota Sobreestimada	->	1.2
 	
 	(*) -> Tiempo promedio en 100 ejecuciones del algoritmo
 	@	-> Anomalia


CONCLUSIONES:
	
	Una vez ejecutados ambos algoritmos y tras observar los resultados obtenidos en las tablas podemos
	afirmar que el algortimo2 es más eficiente que el algoritmo1, debido a que el crecimiento de t(n) es
	claramente menor en sumaSubMax2 que sumaSubMax1.

	
